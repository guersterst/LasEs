@startuml
'https://plantuml.com/sequence-diagram

'!theme aws-orange
skinparam sequenceMessageAlign center
skinparam BoxPadding 10
'skinparam LifelineStrategy nosolid
'autonumber
'autoactivate on
'hide footbox

actor Editor as editor

box "control.backing"
    participant ":SubmissionBacking" as sb << @Named >>
end box
box "control.internal"
    participant ":ExceptionHandler" as eh << @SessionScoped >>
end box
'box "???"
'    participant ":ResourceBundle" as rscBundle
'end box
box "business.service"
    participant "ssvc:SubmissionService" as ssvc << @ApplicationScoped >>
end box
box "business.internal"
    participant ":ExceptionQueue" as eq << @SessionScoped >>
end box
box "business.util"
    participant "eu:EmailUtil" as eu
end box
box "global.transfer"
    participant "sub:Submission" as sub << @Named >>
    participant "paper:Paper" as paper
    participant "submitter:User" as submitter
end box
box persistence
    participant "t1:Transaction" as t1
    participant "t2:Transaction" as t2
    participant ":SubmissionRepository" as sr
    participant "cp:ConnectionPool" as cp
end box

create sb
editor -> sb
note left
    ruft die
    Submission-
    Seite auf
end note
sb --> ssvc : //injection//
return //ssvc//
editor -> sb : init()
activate sb
    note right
        int subId wird
        gelesen von
        requestParams
        (URL-Parameter)
    end note
    sb -> sub ** : Submission()
    sb -> sub : setId(subId)
    activate sub
    return
    sb -> ssvc : __getSubmission(sub)__
    activate ssvc
        ssvc -> t1 ** : Transaction()
        activate t1
            t1 -> cp : __getInstance()__
            activate cp
            return cp
            t1 -> cp : getConnection()
            activate cp
            return
        return
        ssvc -> sr : __getSubmission(sub, t1)__
        activate sr
            sr -> t1 ++ : getConnection()
            return
            sr -> sub : getId()
            activate sub
            return
            sr -> sub : setTitle()
            activate sub
            return
            sr -> sub : setPapers()
            activate sub
            return
            sr -> submitter ** : User()
            sr -> sub : setSubmitter(submitter)
            activate sub
            return
            ......sub befüllen......
        return
        ssvc -> t1 ++ : commit()
            t1 -> cp ++ : releaseConnection()
            return
        return
        destroy t1
    return sub : Submission
    sb -> sub ++ : getTitle()
    return
    sb -> sub ++ : getPapers()
    return
    sb -> sub ++ : getCoAuthors()
    return
    sb -> sub ++ : getSubmitter()
    return
return submission.xhtml


editor -> sb : reject()
note left
    klickt auf "Reject"
end note
activate sb
    sb -> ssvc : changeState(sub,REJECTED)
    activate ssvc
        ssvc -> sub ++ : setSubmissionState(REJECTED)
        return
        ssvc -> sub : getSubmitter()
        activate sub
        return submitter
        ssvc -> sub : getAuthors()
        activate sub
        return authors
        ssvc -> submitter : getEmailAddress()
        activate submitter
        return recipient
        note right of ssvc
            cc = Liste der
            E-Mail-Addressen aller author
        end note
'        subService -> rscBundle : getRejectionEmailSubject()
'        activate rscBundle
'        return subject
'        subService -> rscBundle : getRejectionEmailBody()
'        activate rscBundle
'        return body

        ssvc -> eu : generateMailto(editor.getEmailAddress(),\nrecipient,cc,subject,body)
        activate eu
        return mailtoLink

        ssvc -> t2 ** : Transaction()
        activate t2
            t2 -> cp : __getInstance()__
            activate cp
            return cp
            t2 -> cp : getConnection()
            activate cp
            return
        return

        ssvc -> sr : __changeSubmission(sub, t2)__
        activate sr
            sr -> sub ++ : getId()
            return
            sr -> sub ++ : getTitle()
            return
            sr -> sub ++ : getPapers()
            return
            ......sub auslesen......
            sr -> t2 ++ : getConnection()
            return

        note right of sr
        == ↯ ==
        Timeout bei DB-Zugriff
        ====
        end note

== Anfang Fehlerbehandlung ==
        return <font color=red><b>SQLException

        sr -> eq ++ : add(eine Exception)
            eq -> eh ++ : propertyChange()
            return
        deactivate sr

        ssvc -> t2 ++ : close()
        return

    return <font color=red><b>SQLException

return <font color=red><b>Error page</font> aber ka\nwie das funktioniert
note left
Die Ablehnung war
nicht erfolgreich
end note


@enduml