@startuml
'https://plantuml.com/sequence-diagram

'!theme aws-orange
skinparam sequenceMessageAlign center
skinparam BoxPadding 10
'skinparam LifelineStrategy nosolid
'autonumber
'autoactivate on
'hide footbox

actor User as user

box "control.backing"
    participant ":SubmissionBacking" as sb << @Named >>
end box
'box "???"
'    participant ":ResourceBundle" as rscBundle
'end box
box "control.internal"
    participant "si:SessionInformation" as si << @SessionScoped >>
end box
box "control.validation"
    participant ":PDFValidator" as pdfv << @FacesValidator >>
end box
box "business.service"
    participant "rsvc:PaperService" as rsvc << @ApplicationScoped >>
    participant "ssvc:SubmissionService" as ssvc << @ApplicationScoped >>
end box
box "global.transport"
    participant "sub:Submission" as sub << @Named >>
    participant "user:User" as usr
    participant "file:File" as file
    participant "paper:Paper" as paper
    participant "UIMessage:msg" as msg
end box
box persistence
    participant "t1:Transaction" as t1
    participant "t2:Transaction" as t2
    participant ":SubmissionRepository" as sr
    participant ":PaperRepository" as pr
    participant "cp:ConnectionPool" as cp
end box

create sb
user -> sb
note left
    ruft die
    Submission-
    Seite auf
end note
user -> sb : init()
activate sb
    sb -> si ++ : getUser()
    return User sessionUsr
    sb -> usr ** : User()
    sb -> usr ++ : setId(sessionUsr.getId())
    return
    sb -> sub ** : Submission()
return

note right of user
    int subId wird
    gelesen von
    requestParams
    (URL-Parameter)
end note
user -> sub ++ : setId(subId)
return

user -> sb ++ : preRenderViewListener(event)
return

user -> sb ++ : onLoad() //[via viewAction]//
    sb -> ssvc ++ : canView(sub, usr)
    return true

    sb -> ssvc : getSubmission(sub)
    activate ssvc
        ssvc -> t1 ** : Transaction()
        activate t1
            t1 -> cp : __getInstance()__
            activate cp
            return cp
            t1 -> cp : getConnection()
            activate cp
            return Connection conn
        return
        ssvc -> sr : __get(sub, t1)__
        activate sr
            sr -> sub : getId()
            activate sub
            return id
            sr -> t1 ++ : getConnection()
            return
            sr -> sub : setTitle(title)
            activate sub
            return
            ......sub bef체llen......
        return sub
        ssvc -> t1 ++ : commit()
            t1 -> cp ++ : releaseConnection(conn)
            return
        return
'        destroy t1
        ......
    return sub

    note right of sb
        analoge DB-Zugriffe 체ber die Services:
        UserService#getUsers(sub)
        PaperService#getPaperList(sub,user)
    end note

return

user -> sub ++ : getTitle()
return Title title

user -> pdfv ++ : validate(fctx, cmpt, revisionPDF)
note left
    sucht die PDF-Datei mit
    dem file picker aus und
    klickt auf "Submit Revision"
end note
return
user -> sb ++ : setUploadedRevisionPDF(revisionPDF)
return

user -> sb : uploadPDF()
activate sb
    sb -> file ** : File()
    sb -> file ++ : setFile(revisionPDFBytes)
    return

    sb -> rsvc : addPaper(sub, file)
    activate rsvc
        rsvc -> t2 ** : Transaction()
        activate t2
            t2 -> cp : __getInstance()__
            activate cp
            return cp
            t2 -> cp : getConnection()
            activate cp
            return
        return

        rsvc -> file ++ : getFile()
        return revisionBytes

        rsvc -> sr : __get(sub, t2)__
        activate sr
            sr -> sub : getId()
            activate sub
            return id
            sr -> t2 ++ : getConnection()
            return
            sr -> sub : setTitle(title)
            activate sub
            return
            ...sub bef체llen...
        return Submission sub
        rsvc -> pr ++ : __getList(sub, t2, new ResultListParameters())__
            pr -> sub ++ : getId()
            return id
            pr -> t1 ++ : getConnection()
            return
        return papers
        rsvc -> paper ** : Paper()
        rsvc -> paper : setSubmissionId(subId)
        activate paper
        return
        rsvc -> paper : setId(papers.size())
        activate paper
        return
        rsvc -> paper ++ : setVisible(false)
        return
        rsvc -> sub ++ : setSubmissionState(SUBMITTED)
        return

        rsvc -> pr ++ : __add(paper, t2)__
            pr -> paper ++ : getId()
            return id
            pr -> paper ++ : getVisible()
            return false
            pr -> t1 ++ : getConnection()
            return
        return
        note right of rsvc
            analog: PaperRepository.__setPdf(paper, file)__
        end note

        rsvc -> sr : __change(sub, sub, t2)__
        activate sr
            sr -> sub ++ : getId()
            return
            sr -> sub ++ : getTitle()
            return
            ......sub auslesen......
            sr -> t1 ++ : getConnection()
            return
        return

        rsvc -> t2 ++ : commit()
            t2 -> cp ++ : releaseConnection()
            return
        return

        note right of rsvc
            l채dt String message
            aus ResourceBundle
        end note
        rsvc -> msg ** : UIMessage(message, MessageCategory.INFO)

'        destroy t2
    return

'    subBacking -> rscBundle : getAddRevision\\\nConfirmationMsg()
'    activate rscBundle
'    return msg

return




@enduml